<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>敏捷开发 on Nothing here</title>
    <link>https://blog.zeon.im/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 敏捷开发 on Nothing here</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>©2018 zeon.im</copyright>
    <lastBuildDate>Sat, 28 Apr 2018 14:48:41 +0800</lastBuildDate>
    
	<atom:link href="https://blog.zeon.im/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于敏捷开发的一些整理</title>
      <link>https://blog.zeon.im/2018/04/%E5%85%B3%E4%BA%8E%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%95%B4%E7%90%86/</link>
      <pubDate>Sat, 28 Apr 2018 14:48:41 +0800</pubDate>
      
      <guid>https://blog.zeon.im/2018/04/%E5%85%B3%E4%BA%8E%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%95%B4%E7%90%86/</guid>
      <description>敏捷开发是一种基于增量、迭代的开发方式。敏捷方法具有开放性的特点，它们并不会在一开始就做深入的产品规划，而是鼓励用户持续性进行产品体验反馈，再根据用户需求来进行调整。
在详细说明敏捷开发之前，首先来认识传统的瀑布式开发。
关于传统的瀑布式开发 什么是瀑布式开发 瀑布式开发是一种老旧的，正在过时的计算机软件开发方法。最开始的软件行业普遍采用这种方法，但是这种方法源自于传统的工业生产，在某些方面这种开发方法已经渐渐不适用于当下的软件开发的现状。
瀑布开发适用于按序线性开发的项目，尤其是有明确开发生命周期（SDLC）的项目，比如软件工程、IT项目。我们可以用甘特图来记录每项任务的开始和结束。
瀑布式开发的几个阶段 瀑布开发过程分为7个阶段，且都必须按序进行，每当一个阶段的任务完成后，研发团队才会开始下一阶段工作。
 概念阶段：这个阶段需要提出一个想法。概念阶段包括项目的粗略评估，为什么它是有益的，和相应的产品预算。 启动阶段：一旦想法落地，下一步我们需要找合适的项目团队来执行，和他们确认产品目标、产品范围、产品目的和最终交付的结果。 需求收集阶段：收集和分析需求并评估项目是否真的可行。所有这些信息都记录在需求说明文档中。 产品设计阶段：在这一阶段研发团队已经开始编写代码了。我们要对需求进行研究和评估，并准备设计系统。这时团队的目标是要清楚要做什么和产品雏形应该什么样。 研发阶段：真正开始研发写代码的阶段，产品在设计阶段所产出的流程图或算法在这阶段都需要被翻译为程序语言。 测试阶段：代码完成后，需要测试软件是否有任何错误。测试完成后，软件将交付给客户。有些团队可能会选择包含用户验收测试（UAT），用户在将测试软件部署到公众之前对其进行测试。 维护阶段：一旦客户在现实世界中使用该软件，他们可能会发现其他问题。开发团队需要解决，更改或修改软件才能继续有效。  瀑布式开发的优点及其缺点 瀑布式开发的优点 瀑布式开发所拥有的线性和刚性两个特点，以及所用到深度开发文档，使其适用于简单且没有变动的项目。
 易于使用和管理：由于瀑布开发在每个项目中都遵循相同的顺序，因此易于使用。 交付时间严格：瀑布开发有明确的项目起止时间，因此很容易和客户、利益方分享并跟踪项目进度。 有详细的文档留底：瀑布要求每个阶段都要有文档记录，从而更好地理解代码和测试背后的逻辑。  瀑布式开发的不足之处 瀑布式开发最大的问题便是在于难以应对需求的变更。由于瀑布是一个线性开发模式，不能够在相邻两阶段内来回切换，即使出错也不能退回上一阶段， 只能一条路走到黑。
 难以适应需求的变更：当团队完成某阶段的所有任务后，由于是线性开发，也就意味着这个阶段回不了头了。当他们在测试阶段才发现少了某个功能时，退回再修复需要付非常大的代价。 直到后期才交付软件：项目必须要先进行前置的2到4个阶段才会开始研发。等于相关者要到项目后期才能看到能交付的产品。 收集准确的要求可能是一个挑战：瀑布开发的第一阶段是由项目经理和客户、利益相关方探讨产品需求。在项目初期对产品做非常精准的定位本身就很难。甚至很多时候客户不知道他们想要什么，他们会随着项目的开展才能慢慢了解。  什么是敏捷开发 正如文章开头所说，敏捷开发是一种基于增量、迭代的开发方式。敏捷方法具有开放性的特点，它们并不会在一开始就做深入的产品规划，而是鼓励用户持续性进行产品体验反馈，再根据用户需求来进行调整。
跨职能团队将会根据产品需求优先级在一段时间内进行产品迭代，而进行迭代的最终目的是研发出潜在可发行的软件版本。
敏捷开发的优点及其缺点 虽然敏捷开发比起瀑布式开发来说，更能适应当今软件开发的需求，但敏捷开发也有着其自身的有点和不足。
敏捷开发的优点 敏捷开发本身更侧重于灵活性、持续改进和速度。具体的优点如下：
 拥抱改变：通过缩短规划周期，在项目期间能够灵活的做出调整变更。因此敏捷总会有机会来重新整理产品客户需求，让团队在几周内调整项目方向。 无需非常清楚最终目标：敏捷对于没有明确定义最终目标的项目是非常有利的。随着项目推进，目标将会变得更加清晰，开发过程可以很容易地适应不断变化的需求。 更快速、高质量的交付：将项目分解为不同的迭代（可管理单元），让团队能够专注于高质量的开发、测试和协作的环节。每次在迭代中的测试都将意味着我们能够更快的发现问题和解决问题。并且我们可以通过高频的迭代交付高质量的软件。 注重团队意识：敏捷非常强调当面沟通和高频沟通的重要性。团队成员在一起工作中相互了解、各司其职。 听取客户的意见：客户在项目进行中将会看到很多潜在可交付的软件版本，听取他们的想法，从中获取对产品迭代有利的意见。同时对他们而言，通过与项目团队的合作可以增加归属感。 持续性迭代与改进：敏捷开发鼓励用户和团队成员在整个项目中不断提供产品体验反馈，从中吸取经验，为后续版本的迭代提供基础。  敏捷开发的不足 通常我们认为敏捷的灵活性在整个项目中起积极作用，但它也互有利弊。产品交期难以确定，可视化文档可能被忽视，甚至连最终交付的产品与初衷大相径庭。
 项目规划不太具体：有时很难确定软件的交期。虽然敏捷是基于时间节点来进行交付，但项目经理会不断调整任务优先级，导致原本该交付项目跳票。同时，项目中任何新增用户需求都会花费额外的时间，从而延长整个项目进度。 对项目成员的能力要求高：敏捷团队通常很小，所以需要团队成员熟练掌握各个领域的技能。同时，他们还得对选用的敏捷方法无异议。 研发阶段时间压力大：团队投入全力进行研发是敏捷最成功的环节。在整个敏捷中需要项目成员积极参与、相互协作，但比传统的开发方法更耗时。这也意味着需要研发团队明确给出各阶段时间点并且准时交付。 文档可能会被忽视：敏捷宣言提倡用软件替代各类纸质文档来进行管理整个过程，因此团队成员可能会不再重视文档。虽然纸质文档本身并不会影响项目是否成功，但团队还是得在文档和用软件进行讨论之间找到平衡点。 最终产品可能与初衷大相径庭：最初的敏捷项目可能没有一个明确的计划，因此最终产品看起来可能与最初的目标完全不同。由于敏捷非常灵活，所以可以根据不断变化的客户反馈来添加新的迭代，这可能会导致最终的交付成果大不相同。  敏捷如何解决软件需求 敏捷帮助项目团队快速洞悉客户最主要的需求。通过持续的当面沟通和反馈，让项目团队和利益相关者就能够快速理解项目并发现优先级高的需求。
敏捷团队用产品需求列表（backlogs）来管理用户故事和其他需求。开始迭代前，研发团队将会确定下次交付的产品会包含哪些功能。这种协作方式确保了优先级高的需求能得到优先处理。即使后期频繁的出现产品需求变化，我们也能及时做更新。
敏捷开发周期 敏捷开发周期中包含下面几个阶段，值得注意的是，单独某个阶段尽量不要重复；同时整个周期中可能同时进行多个阶段，这样在保证灵活性的同时在不断推进开发进度。
 产品规划：一旦某个想法被认为可行，项目团队就会一起努力确定其功能。这个阶段的目标是将想法细分成更小的工作（产品特性），然后将每个特性划分优先级，并将其分配给不同的迭代版本。 需求分析：这个阶段需要和产品经理、利益相关者和用户进行多次会议讨论来确定业务需求。研发团队需要收集信息（比如谁将使用该产品以及他们将如何使用该产品等）。这些要求必须详细、可量化，同时具有相关性。 产品设计：根据前一阶段确定的产品需求而进行研发系统和设计软件。团队需要考虑产品或解决方案的雏形。而测试团队需要提出下一阶段的测试规划。 产品研发：此阶段主要研发和测试优先级高的产品特性，并准备安排迭代（遵循迭代和增量开发方法[IID]）。由于没有可交付的产品特性，因此研发阶段从最小模型开始迭代，这次迭代为之后研发提供基础。 产品测试：代码开发完成后开始进行单元测试、集成测试、系统测试和验收测试，以确保产品能够满足客户需求并匹配用户故事。 部署产品：测试完成后，我们可以将产品提交给客户。但是部署产品并不代表项目已经结束，客户在使用产品中遇到的新问题依旧需要项目团队去解决。   文章整理自明道博客。</description>
    </item>
    
  </channel>
</rss>